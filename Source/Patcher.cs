using System;
using System.IO;

namespace S7Patcher.Source
{
    internal class Patcher(FileStream Stream, GameVariant ID, bool Debug)
    {
        private readonly FileStream GlobalStream = Stream;
        private readonly GameVariant GlobalID = ID;
        private readonly bool GlobalDebug = Debug;

        public void PatchGameWrapper()
        {
            if (GlobalID == GameVariant.HE_STEAM || GlobalID == GameVariant.HE_UBI)
            {
                PatchHistoryEdition();
            }
            else
            {
                PatchOriginalRelease();
                UpdateConfigurationFile("Profiles.xml");
            }

            UpdateConfigurationFile("Options.ini");
            AskForAffinity();
        }

        private void PatchOriginalRelease()
        {
            Helpers.Instance.WriteToFile(GlobalStream, 0x00D40D, [0xE8, 0xBC, 0x99, 0x68, 0x00, 0x90]);
            Helpers.Instance.WriteToFile(GlobalStream, 0x696DCE, [0x55, 0x89, 0xE5, 0xC6, 0x05, 0x79, 0x5B, 0x0E, 0x01, 0x01, 0x89, 0xEC, 0x5D, 0xC3]);
            Helpers.Instance.WriteToFile(GlobalStream, 0x1A978E, [0xEB]);
            Helpers.Instance.WriteToFile(GlobalStream, 0x1A977C, [0x90, 0x90]);
            Helpers.Instance.WriteToFile(GlobalStream, 0x64477C, [0xB0, 0x00]);
            Helpers.Instance.WriteToFile(GlobalStream, 0x21929C, [0xB0, 0x00]);
            Helpers.Instance.WriteToFile(GlobalStream, 0x219224, [0xB0, 0x00]);
            Helpers.Instance.WriteToFile(GlobalStream, 0x195C34, [0xEB, 0x15]);
            Helpers.Instance.WriteToFile(GlobalStream, 0x69000F, [0x94]);
            Helpers.Instance.WriteToFile(GlobalStream, 0x58BC2E, [0x01]);
            Helpers.Instance.WriteToFile(GlobalStream, 0x696D83, [0x90, 0x90, 0x90, 0x90, 0x90]);
            Helpers.Instance.WriteToFile(GlobalStream, 0x696DC8, [0xE9, 0x0B, 0x03, 0x00, 0x00, 0x90]);
            Helpers.Instance.WriteToFile(GlobalStream, 0x62F0A9, [0xE9, 0xF2, 0x00, 0x00, 0x00, 0x90]);
            Helpers.Instance.WriteToFile(GlobalStream, 0x2031C5, [0xEB]);

            if (GlobalDebug)
            {
                Helpers.Instance.WriteToFile(GlobalStream, 0x00D2D9, [0x90, 0x90]); // Always show message before startup happens
            }
        }

        private void PatchHistoryEdition()
        {
            if (GlobalID == GameVariant.HE_STEAM)
            {
                Helpers.Instance.WriteToFile(GlobalStream, 0x13CFEC, [0x94]);

                if (GlobalDebug)
                {
                    Helpers.Instance.WriteToFile(GlobalStream, 0xAC5435, [0x90, 0x90]); // Always show message before startup happens
                }
            }
            else if (GlobalID == GameVariant.HE_UBI)
            {
                Helpers.Instance.WriteToFile(GlobalStream, 0x13D9FC, [0x94]);

                if (GlobalDebug)
                {
                    Helpers.Instance.WriteToFile(GlobalStream, 0xAC5D4A, [0x90, 0x90]); // Always show message before startup happens
                }
            }
        }

        private void UpdateConfigurationFile(string Name)
        {
            string Folder = (GlobalID == GameVariant.ORIGINAL) ? "Settlers7" : "THE SETTLERS 7 - History Edition";
            string Filepath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), Folder, Name);

            if (File.Exists(Filepath) == false)
            {
                do
                {
                    Console.WriteLine("\n" + Filepath + " not found!\nPlease input the path to the " + Name + " file:\n(Input skip to skip file patching)");
                    Filepath = Console.ReadLine();

                    if (Filepath == "skip")
                    {
                        Console.WriteLine("Skipping file patching ...");
                        return;
                    }
                    else if (File.Exists(Filepath))
                    {
                        break;
                    }
                }
                while (true);
            }

            Console.WriteLine("Going to patch file: " + Filepath);
            if (Name == "Profiles.xml")
            {
                Helpers.Instance.UpdateProfileXML(Filepath);
            }
            else if (Name == "Options.ini")
            {
                Helpers.Instance.UpdateEntriesInOptionsFile(Filepath);
            }
        }

        private void AskForAffinity()
        {
            Console.WriteLine("\nUpdate Process Affinity? (Enables higher framerate and smoother performance)\n(0 = Yes/1 = No):");
            int Input = Console.Read();
            if (Input != '0')
            {
                Console.WriteLine("Skipping Affinity ...");
                return;
            };

            byte Mask = Helpers.Instance.GetAffinityMaskByte(0x2A);
            Console.WriteLine("Going to patch Affinity with value: 0x" + $"{Mask:X}");
            switch (GlobalID)
            {
                case GameVariant.NONE:
                    break;
                case GameVariant.ORIGINAL:
                    UpdateProcessAffinityOriginal(Mask);
                    break;
                case GameVariant.HE_STEAM:
                    UpdateProcessAffinitySteamHE(Mask);
                    break;
                case GameVariant.HE_UBI:
                    UpdateProcessAffinityUbiHE(Mask);
                    break;
                default:
                    break;
            }
        }

        private void UpdateProcessAffinityOriginal(byte Mask)
        {
            Helpers.Instance.WriteToFile(GlobalStream, 0x62F0AE, [0x55, 0x8B, 0xEC, 0x68, 0x38, 0x73, 0xF2, 0x00, 0xFF, 
                0x15, 0x70, 0xF1, 0xEB, 0x00, 0x68, 0xC8, 0x25, 0xF3, 0x00, 0x50, 0xFF, 0x15, 0x24, 0xF1, 0xEB, 0x00, 
                0x85, 0xC0, 0x74, 0x10, 0x90, 0x90, 0x90, 0x89, 0xC3, 0x6A, Mask, 0xFF, 0x15, 0x3C, 0xF2, 0xEB, 0x00, 
                0x50, 0xFF, 0xD3, 0x8B, 0xE5, 0x5D, 0xC3, 0x90]); // Create new function to set process affinity

            Helpers.Instance.WriteToFile(GlobalStream, 0xB311C8, [0x53, 0x65, 0x74, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x41, 
                0x66, 0x66, 0x69, 0x6E, 0x69, 0x74, 0x79, 0x4D, 0x61, 0x73, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]); // Update function name

            Helpers.Instance.WriteToFile(GlobalStream, 0x00D944, [0xE8, 0x65, 0x17, 0x62, 0x00, 0xEB, 0x08, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90]); // Override Thread Affinity & Jump
        }

        private void UpdateProcessAffinitySteamHE(byte Mask)
        {
            Helpers.Instance.WriteToFile(GlobalStream, 0x45897B, [0xE9, 0x9F, 0x00, 0x00, 0x00, 0x90, 0x55, 0x8B, 0xEC,
                0x68, 0xF8, 0xEA, 0x12, 0x01, 0xFF, 0x15, 0xE8, 0xF1, 0x04, 0x01, 0x68, 0x18, 0x20, 0x13, 0x01, 0x50,
                0xFF, 0x15, 0xB4, 0xF0, 0x04, 0x01, 0x85, 0xC0, 0x74, 0x0D, 0x89, 0xC3, 0x6A, Mask, 0xFF, 0x15, 0x68,
                0xF1, 0x04, 0x01, 0x50, 0xFF, 0xD3, 0x8B, 0xE5, 0x5D, 0x31, 0xC0, 0xC3, 0x90]); // Create new function to set process affinity

            Helpers.Instance.WriteToFile(GlobalStream, 0xD30C18, [0x53, 0x65, 0x74, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73,
                0x73, 0x41, 0x66, 0x66, 0x69, 0x6E, 0x69, 0x74, 0x79, 0x4D, 0x61, 0x73, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00]); // Update function name

            Helpers.Instance.WriteToFile(GlobalStream, 0xAC5BF0, [0xE8, 0x8C, 0x2D, 0x99, 0xFF, 0xEB, 0x17, 0x90, 0x90, 0x90]); // Override Thread Affinity & Jump
        }

        private void UpdateProcessAffinityUbiHE(byte Mask)
        {
            Helpers.Instance.WriteToFile(GlobalStream, 0x458BAB, [0xE9, 0x9F, 0x00, 0x00, 0x00, 0x90, 0x55, 0x8B, 0xEC, 
                0x68, 0x58, 0x03, 0x13, 0x01, 0xFF, 0x15, 0xF8, 0x11, 0x05, 0x01, 0x68, 0xD0, 0x3A, 0x13, 0x01, 0x50, 
                0xFF, 0x15, 0x94, 0x11, 0x05, 0x01, 0x85, 0xC0, 0x74, 0x0D, 0x89, 0xC3, 0x6A, Mask, 0xFF, 0x15, 0x94, 
                0x10, 0x05, 0x01, 0x50, 0xFF, 0xD3, 0x8B, 0xE5, 0x5D, 0x31, 0xC0, 0xC3, 0x90]); // Create new function to set process affinity

            Helpers.Instance.WriteToFile(GlobalStream, 0xD31AD0, [0x53, 0x65, 0x74, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 
                0x73, 0x41, 0x66, 0x66, 0x69, 0x6E, 0x69, 0x74, 0x79, 0x4D, 0x61, 0x73, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00]); // Update function name

            Helpers.Instance.WriteToFile(GlobalStream, 0xAC6505, [0xE8, 0xA7, 0x26, 0x99, 0xFF, 0xEB, 0x17, 0x90, 0x90, 0x90]); // Override Thread Affinity & Jump
        }
    }
}
